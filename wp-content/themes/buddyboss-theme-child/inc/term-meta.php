<?php
// File generated by WPTurbo.dev

/**
 * class Course_Category
 * 
 * Register and manage custom term meta fields.
 *
 * @since 1.0.0
 */
class Course_Category
{

	/**
	 * Array of custom fields.
	 *
	 * @since 1.0.0
	 * @access private
	 * @var array $fields Array of custom fields.
	 */
	private $fields = [
		'course_category_order' => [
			'type' => 'number',
			'label' => 'Course Category Order',
			'default' => '1',
		],
	];

	/**
	 * Constructor.
	 *
	 * Register hooks for rendering and saving custom term meta fields.
	 *
	 * @since 1.0.0
	 * @access public
	 */
	public function __construct()
	{
		if (is_admin()) {
			// Register all the hooks.
			add_action('ld_course_category_add_form_fields', [$this, 'bb__render_meta_fields'], 10, 2);
			add_action('ld_course_category_edit_form_fields', [$this, 'bb__edit_meta_fields'],  10, 2);
			add_action('created_ld_course_category', [$this, 'bb__save_meta_fields'], 10, 1);
			add_action('edited_ld_course_category',  [$this, 'bb__save_meta_fields'], 10, 1);
			add_filter('manage_edit-ld_course_category_columns', [$this, 'bb__table_order_column_content']);
			add_filter('manage_ld_course_category_custom_column', [$this, 'bb__table_column_content'], 10, 3);
		}
	}
	function bb__table_order_column_content($column)
	{
		$column['order'] = 'Order';
		return $column;
	}

	/**
	 * Render fields on the add taxonomy page.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param string $taxonomy Current taxonomy name.
	 */
	public function bb__render_meta_fields(string $taxonomy): void
	{
		$html = '';
		foreach ($this->fields as $field_id => $field) {
			$meta_value = '';
			if (isset($field['default'])) {
				$meta_value = $field['default'];
			}

			$field_html = $this->bb__render_input_field($field_id, $field, $meta_value);
			$label = "<label for='$field_id'>{$field['label']}</label>";
			$html .= $this->bb__format_field($label, $field_html);
		}
		echo $html;
	}

	/**
	 * Render fields on the edit taxonomy page.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param WP_Term $term     Current term object.
	 * @param string  $taxonomy Current taxonomy name.
	 */
	public function bb__edit_meta_fields(WP_Term $term, string $taxonomy): void
	{
		$html = '';
		foreach ($this->fields as $field_id => $field) {
			$meta_value = get_term_meta($term->term_id, $field_id, true);
			$field_html = $this->bb__render_input_field($field_id, $field, $meta_value);
			$label = "<label for='$field_id'>{$field['label']}</label>";
			$html .= $this->bb__format_field($label, $field_html);
		}
		echo $html;
	}

	/**
	 * Format every field to table display.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param string $label Label for the field.
	 * @param string $field Field HTML.
	 *
	 * @return string Formatted field HTML.
	 */
	public function bb__format_field(string $label, string $field): string
	{
		return '<tr class="form-field"><th>' . $label . '</th><td>' . $field . '</td></tr>';
	}

	/**
	 * Render each individual field.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param string $field_id Field ID.
	 * @param array  $field    Field settings.
	 * @param string $field_value Field value.
	 *
	 * @return string Rendered field HTML.
	 */
	public function bb__render_input_field(string $field_id, array $field, string $field_value): string
	{
		switch ($field['type']) {
			case 'select': {
					$field_html = '<select name="' . $field_id . '" id="' . $field_id . '">';
					foreach ($field['options'] as $key => $value) {
						$key = !is_numeric($key) ? $key : $value;
						$selected = '';
						if ($field_value === $key) {
							$selected = 'selected="selected"';
						}
						$field_html .= '<option value="' . $key . '" ' . $selected . '>' . $value . '</option>';
					}
					$field_html .= '</select>';
					break;
				}
			case 'textarea': {
					$field_html = '<textarea name="' . $field_id . '" id="' . $field_id . '" rows="6">' . $field_value . '</textarea>';
					break;
				}
			default: {
					$field_html = "<input type='{$field['type']}' id='$field_id' class='small-text' name='$field_id' value='$field_value' />";
					break;
				}
		}

		return $field_html;
	}

	/**
	 * Save the new meta values for our taxonomy.
	 *
	 * @since 1.0.0
	 * @access public
	 *
	 * @param int $term_id Term ID.
	 */
	public function bb__save_meta_fields(int $term_id): void
	{
		foreach ($this->fields as $field_id => $field) {
			if (isset($_POST[$field_id])) {
				// Sanitize fields that need to be sanitized.
				switch ($field['type']) {
					case 'email': {
							$_POST[$field_id] = sanitize_email($_POST[$field_id]);
							break;
						}
					case 'text': {
							$_POST[$field_id] = sanitize_text_field($_POST[$field_id]);
							break;
						}
				}
				update_term_meta($term_id, $field_id, $_POST[$field_id]);
			}
		}
	}
	public function bb__table_column_content($content, $column_name, $term_id)
	{
		$term = get_term_meta($term_id, 'course_category_order', true);

		$getCourseCat = get_term_by('id', $term_id, 'ld_course_category');

		if ($getCourseCat->parent == 0) :
			$isParent = __('Parent');
		else :
			$getParentCat = get_term_by('id', $getCourseCat->parent, 'ld_course_category');
			$isParent = $getParentCat->name;
		endif;

		switch ($column_name) {
			case 'order':
				$content = $isParent . ' - ' . $term;
				break;
			default:
				break;
		}

		return $content;
	}
}

if (class_exists('Course_Category')) {
	new Course_Category();
}
